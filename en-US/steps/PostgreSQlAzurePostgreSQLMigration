<!-- Migrate using Attunity Replicate for Microsoft Migrations-->

### Near zero downtime migrations with Attunity Replicate!

Microsoft has partnered with Attunity around specific migration scenarios (source/target pairs). Attunity Replicate supports a very large set of sources and targets. The edition of Attunity Replicate that we refer to in the context of this partnership is known as Attunity Replicate For Microsoft Migrations (this is an Attunity product and not a Microsoft product) and enables only the scenarios for which we are partnering for now. 

Attunity Replicate is a data replication tool that enables data sync between a variety of sources and targets. In this context, 
for each table, Attunity Replicate propagates its schema creation script and its data. It will not propagate any other artifacts (SP, triggers, functions, ….) 
and will not convert say PL/SQL code hosted in artifacts like functions/SP/triggers to T-SQL. 

Proposed sequence and usage of tools:
1.	**Convert the source PostgreSQL database** (schema and data) to Azure PostgreSQL.
2.	**Continuously replicate data changes from the source database to the target database** with _Attunity Replicate For Microsoft Migrations_. This will help you minimize the amount of time you will need to prevent writes on the source database while you prepare to switch your applications to the target PostgreSQL on Aure.

Download link to [Attunity Replicate For Microsoft Migrations](https://aka.ms/attunity-replicate) offering.


### Setting up Attunity for PostgreSQL Replication

1. Install Postgres on Azure Virtual Machine.
2. Provision an instance of Azure PostgreSQL.
3. Load a database or use this [sample database](http://www.postgresqltutorial.com/load-postgresql-sample-database/).
4. Refer to this [Azure documentation](https://docs.microsoft.com/en-us/azure/postgresql/howto-migrate-using-dump-and-restore) for backing up the database from on-premise instance 
   and restoring the backup to Azure Postgres instance.
5. Setup Attunity using the Attunity Installation link above.
6. Install [Postgres 64 bit ODBC driver](https://www.postgresql.org/ftp/odbc/versions/msi/) on the Replicate server machine.
7. Make sure that the PostgreSQL ODBC installation folder "bin" (e.g. "C:\Program Files\psqlODBC\0906\bin") is added to the system PATH environment variable 
   Note: in some cases, the user PATH environment variable need to be set as well.
8. Add PostgreSQL bin installation folder (C:\Program Files\PostgreSQL\9.6\bin) to 
   SYSTEM PATH (Settings-->System --> About --> System Info --> Advanced System Settings -->Environment Variables).
9. Open Attunity Console from start menu and create a new "EndPoint Connection for Postgres On-Premise instance. 
   ![Attunity console](https://mpbdevcontent.azureedge.net/Images/attunityconsole.png)
10. For connecting the client/Attunity server machine to Azure Postgres, SSL connection need to be enabled in the client. 
    Follow the instructions in [Azure documentation](https://docs.microsoft.com/en-us/azure/postgresql/concepts-ssl-connection-security)
    here to enable SSL connection.
11. Decode root certificate in Attunity machine SSL Connection for Azure Postgres.
	a. [SSL certificate for Postgres](https://docs.microsoft.com/en-us/azure/postgresql/concepts-ssl-connection-security) need to be installed on the Attunity Server.
	b. To run OpenSSL to decode the root certificate downloaded in [here](https://www.digicert.com/CACerts/BaltimoreCyberTrustRoot.crt), check OS system on the Attunity Machine:
       
        * If Attunity machine is Windows 10 with Anniversary Update or later, install [Windows Subsystem for Linux](https://msdn.microsoft.com/en-us/commandline/wsl/install_guide).
        * If Attunity machine is Windows Server 2016, follow [Windows Server Installation Guide](https://msdn.microsoft.com/en-us/commandline/wsl/install-on-server).
	c. If Attunity machine is neither Windows 10 or Windows Server 2016, apply the following workaround:
	* Copy OpenSSL executable from \\scratch2\scratch\Yuchuan\OpenSSL-Win64 to C:\ of Attunity machine
	* You can decode BaltimoreCyberTrustRoot.cer again by running this command. This step is optional. The root.crt is already in the folder
	       	  OpenSSL>x509 -inform DER -in BaltimoreCyberTrustRoot.cer -text -out root.crt
    	d. Copy root.crt to AppData folder for local user and system profile
        * Copy root.crt to C:\Windows\System32\config\systemprofile\AppData\Roaming\postgresql
        * Copy root.crt to C:\Users\[localuser]\AppData\Roaming\postgresql
	e. In Attunity, setup target of PostgreSQL (Orcas), and in Attunity Internal Parameter settings
        * Enter additionalConnectionProperties sslmode=verify-ca;pqopt=sslrootcert=<<Specify the certificate path on the Attunity Server>>
12. Once SSL is enable and root.crt is created, note the path.
13. Create a new "Target" Endpoint connection for Azure Postgres. Same as the On-Prem connection setting above, but need to add extra settings in the Advanced tab: Parameter name: 
    additionalConnectionProperties; Value: sslmode=verify-ca;pqopt=sslrootcert=C:\\SSLCert\\root.crt
14. Once the source and target connections are created, proceed to creating a task for the Sync.
15. Drag and drop to specify source and target for the task. 
    ![Drag and drop](https://mpbdevcontent.azureedge.net/Images/attunitydragdrop.png)
16. The above task would do a full load first, and then apply the changes from source to target for subsequent changes.
17. Use Table Selection to specify the source tables to sync.
    ![Table selection](https://mpbdevcontent.azureedge.net/Images/attunitytableselection.png)
18. Save and Click Run. 
19. Use the Monitor tab on the top right to view the status of the deployed tasks.
20. Once the tasks start running, Check the target database on Azure Postgtres to see if the configured table is created and all the rows copied.
21. Make changes to the table on the source database (insert/delete/update) and run queries against the target table to see if those changes are reflected.

### Setup Errors and Resolutions

Below are some errors you might encounter with the initial task creation and their resolutions.

1. RetCode: SQL_ERROR  SqlState: 55000 NativeError: 1 Message: ERROR: replication slots can only be used if max_replication_slots > 0;
Error while executing the query [1022502]  (ar_odbc_stmt.c:2367)

_Resolution: Set max_replication_slots to greater than 0 in the Postgres source server configuration. 
The max_replication_slots value should be set according to the number of tasks that you
want to run. For example, to run 5 tasks you need to set a minimum of 5 slots. Slots open
automatically as soon as a task starts and remain open, even when task is no longer running.
Note that open slots need to be manually deleted.
max_wal_senders >=1
The max_wal_senders parameter sets the number of concurrent tasks that can run.
The wal_sender_timeout parameter terminates replication connections that are inactive
longer than the specified number of milliseconds. The default timeout is 60 seconds. To
disable the timeout mechanism (optional), set this parameter to zero.

To be more clear, set the parameters like this in postgresql.config(remember to remove the # (comment)). Do not use ">", postgres does not recognize this.
wal_level = logical			# minimal, replica, or logical
max_wal_senders = 3		# max number of walsender processes
max_replication_slots = 1	# max number of replication slots_


